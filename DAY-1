1. Check If All 1's Are at Least Length K Places Away
2. Check Array Formation Through Concatenation

class Solution {
public:
    bool kLengthApart(vector<int>& nums, int k) 
    {
        vector<int> m;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==1)
            {
                m.push_back(i);
            }
        }
        for(auto it:m)
        {
            cout<<it<<" ";
        }
        for(int i=1;i<m.size();i++)
        {
            if((m[i]-m[i-1]) < k+1)
            {
                return false;
            }
        }
        
        
        
     return true;   
    }
};
............................................................................
class Solution {
public:
    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) 
    {
        int i=0;
        int n=arr.size();
        while(i < n)
        {
            int found=-1;
            for(int j=0;j<pieces.size();j++)
            {
                if(arr[i]==pieces[j][0])
                {
                    found=j;
                    break;
                }
            }
            if(found==-1)
            {
                return false;
            }
            auto target=pieces[found];
            for(int x:target)
            {
                if(x!=arr[i])
                {
                    return false;
                }
                i++;
            }
            
        }
        return true;
    }
};
