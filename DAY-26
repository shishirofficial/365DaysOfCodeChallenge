Balanced Binary Tree
Minimum Depth of a Binary Tree

class Solution {
public:
    int height(TreeNode *root)
    {
        if(root==NULL)
        {
            return -1;
        }
        return 1+max(height(root->left),height(root->right));
    }
    bool isBalanced(TreeNode* root) 
    {
        if(root==NULL)
        {
            return true;
        }
        return abs(height(root->left)-height(root->right))<2 && isBalanced(root->left) && isBalanced(root->right);
    }
};

....................................................
class Solution {
public:
    int minDepth(TreeNode* root)
    {
        if(root==NULL)
        {
            return 0;
        }
        if((root->left==NULL) && (root->right==NULL))
        {
            return 1;
        }
        int min_depth=INT_MAX;
        if(root->left!=NULL)
        {
            min_depth=min(minDepth(root->left),min_depth);
        }
        if(root->right!=NULL)
        {
            min_depth=min(minDepth(root->right),min_depth);
        }
       return min_depth+1; 
    }
    
};
