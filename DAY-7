1. 3 Sum
2. 3 Sum Closest

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums)
    {
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        for(int i=0;i<nums.size() && nums[i]<=0;i++)
        {
            if(i==0 || nums[i-1]!=nums[i])
            {
                twosum(nums,i,res);
            }
        }
        return res;
    }
    
    void twosum(vector<int> nums,int i,vector<vector<int>> &res)
    {
        int lo=i+1;
        int hi=nums.size()-1;
        while(lo < hi)
        {
            int sum=nums[i]+nums[lo]+nums[hi];
            if(sum<0)
            {
                lo++;
            }
            else if(sum>0)
            {
                hi--;
            }
            else
            {
                res.push_back({nums[i],nums[lo++],nums[hi--]});
                while(lo<hi && nums[lo]==nums[lo-1])
                {
                    lo++;
                }
            }
        }
    }
};

...........................................................................................................

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target)
    {
        sort(nums.begin(),nums.end());
        int diff=INT_MAX;
        
        for(int i=0;i<nums.size() && diff!=0;i++)
        {
            int lo = i+1;
            int hi = nums.size()-1;
            while(lo < hi)
            {
                int sum=nums[i]+nums[lo]+nums[hi];
                if(abs(target-sum)<abs(diff))
                {
                    diff=target - sum;
                }
                if(sum<target)
                {
                    lo++;
                }
                else
                {
                    hi--;
                }
            }
        }
       return target-diff; 
    }
};

