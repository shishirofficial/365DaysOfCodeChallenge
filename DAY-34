1. Design Hashset
2. Design HashMap

class MyHashSet {
public:
    /** Initialize your data structure here. */
    struct Bucket{
        vector<int> v = {};
        
        void add(int key)
        {
            if(!contains(key))
            {
                v.push_back(key);
            }
        }
        
        void remove(int key)
        {
            auto pos=find(v.begin(),v.end(),key);
            if(pos!=v.end())
            { 
                v.erase(pos);
            }
        }
        
        bool contains(int key)
        {
            return find(v.begin(),v.end(),key)!=v.end();
        }
    };
    int hashkey;
     vector<Bucket> array;
    MyHashSet(int keysize=137) 
    {
       
        hashkey=keysize;
        array.resize(hashkey);
    }
    
    void add(int key)
    {
        array[key%hashkey].add(key);
    }
    
    void remove(int key)
    {
        array[key%hashkey].remove(key);
    }
    
    /** Returns true if this set contains the specified element */
    bool contains(int key) {
        return array[key%hashkey].contains(key);
    }
};
.......................................................................................
class MyHashMap {
public:
    /** Initialize your data structure here. */
    int hash(int key)
    {
        return key%10000;
    }
    
    vector<vector<pair<int,int>>> mp;
    MyHashMap() 
    {
        mp.resize(10000,{});
    }
    
    /** value will always be non-negative. */
    void put(int key, int value)
    {
        int hash_val=hash(key);
        for(int i=0;i<mp[hash_val].size();i++)
        {
            if(mp[hash_val][i].first==key)
            {
                mp[hash_val][i].second=value;
                return;
            }
        }
        mp[hash_val].push_back({key,value});
        return;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key)
    {
        int hash_val=hash(key);
        for(int i=0;i<mp[hash_val].size();i++)
        {
            if(mp[hash_val][i].first==key)
            {
                return mp[hash_val][i].second;
            }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key)
    {
        int hash_val=hash(key);
        for(int i=0;i<mp[hash_val].size();i++)
        {
            if(mp[hash_val][i].first==key)
            {
                mp[hash_val].erase(mp[hash_val].begin()+i);
            }
        }
        return;
    }
};
