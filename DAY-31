Find All the Lonely Nodes
Search in a Sorted Array of Unknown Sizes
class Solution {
public:
    vector<int> ans;
    void dfs(TreeNode *root)
    {
        if(root==NULL)
        {
            return;
        }
        if(root->left==NULL && root->right !=NULL)
        {
            ans.push_back(root->right->val);
        }
        if(root->left != NULL && root->right == NULL)
        {
            ans.push_back(root->left->val);
        }
        dfs(root->left);
        dfs(root->right);
    }
    vector<int> getLonelyNodes(TreeNode* root) {
        dfs(root);
        return ans;
    }
};
...............................................................
class Solution {
public:
    int search(const ArrayReader& reader, int target)
    {
        if(reader.get(0) == target) return 0;
        int left=0;
        int right=1;
        while(reader.get(right) < target)
        {
            left=right;
            right<<=1;
        }
        
        while(left<=right)
        {
            int pivot=left + (right-left)/2;
            int num = reader.get(pivot);
            if(num == target) return pivot;
            else if(num > target)
            {
                right=pivot-1;
            }
            else
            {
                left=pivot+1;
            }
        }
       return -1; 
    }
};
