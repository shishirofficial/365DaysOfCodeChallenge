1. 3 Sum Smaller
2. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts

class Solution {
public:
    int twopointer(vector<int> &nums,int startindex,int target)
    {
        int sum=0;
        int left=startindex;
        int right=nums.size()-1;
        while(left < right)
        {
            if((nums[left]+nums[right]) < target)
            {
                sum+=(right-left);
                left++;
            }
            else
            {
                right--;
            }
        }
        return sum;
    }
    
    
    int threeSumSmaller(vector<int>& nums, int target)
    {
        if(nums.size() < 3)
        {
            return 0;
        }
        sort(nums.begin(),nums.end());
        int sum=0;
        for(int i=0;i<nums.size()-2;i++)
        {
            sum+=twopointer(nums,i+1,target-nums[i]);
        }
       return sum; 
    }
};

........................................................................

class Solution {
public:
    const long long int mod = 1000000007;
    int maxArea(int hi, int wi, vector<int>& h, vector<int>& v) 
    {
        sort(h.begin(),h.end());
        sort(v.begin(),v.end());
        
        vector<int> height = {h[0]};
        vector<int> length = {v[0]};
        
        int numberheight=h.size();
        int numberlength=v.size();
        
        // height
        for(int i=1;i<numberheight;i++)
        {
            height.push_back(h[i]-h[i-1]);
        }
        height.push_back(hi-h[numberheight-1]);
        
        //length
        for(int i=1;i<numberlength;i++)
        {
            length.push_back(v[i]-v[i-1]);
        }
        length.push_back(wi-v[numberlength-1]);
        
        long long int a = *max_element(height.begin(),height.end());
        long long int b = *max_element(length.begin(),length.end());
        
        return (int)(a%mod*b%mod);
    }
};
