Range Sum of BST
Convert Sorted Array to Binary Search Tree

class Solution {
public:
    int sum;
    int rangeSumBST(TreeNode* root, int low, int high) 
    {
        sum=0;
        dfs(root,low,high);
        return sum;
    }
    void dfs(TreeNode *root,int low,int high)
    {
        if(root == NULL)
        {
            return;
        }
        if(root->val >= low && root->val <=high)
        {
            sum+=root->val;
        }
        if(root->val > low)
        {
            dfs(root->left,low,high);
        }
        if(root->val < high)
        {
            dfs(root->right,low,high);
        }
    }
};

.....................................................................

class Solution {
public:

    TreeNode *helper(vector<int> &nums,int left,int right)
    {
        if(left > right) return NULL;
        int p = (left + right)/2;
        TreeNode *root = new TreeNode(nums[p]);
        root->left = helper(nums,left,p-1);
        root->right = helper(nums,p+1,right);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) 
    {
        
        return helper(nums,0,nums.size()-1);
    }
};
