Maximum Depth of N-ary Tree
Leaf Similar Trees


class Solution {
public:
    int maxDepth(Node* root)
    {
        if(!root)
        {
            return 0;
        }
        int level = 1,len;
        Node *curr;
        queue<Node*> q;
        for(auto n:root->children)q.push(n);
        len=q.size();
        while(len)
        {
          for(int i=0;i<len;i++)
          {
              curr=q.front();
              q.pop();
              for(auto it:curr->children)q.push(it);
              
          }
          len=q.size();
          level++;
            
        }
       return level; 
    }
};
............................................................................


class Solution {
public:
    void dfs(TreeNode *root,vector<int> &leaves)
    {
        if(!root) return;
        if(root->left==NULL && root->right==NULL)
        {
            leaves.push_back(root->val);
        }
        dfs(root->left,leaves);
        dfs(root->right,leaves);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2)
    {
        vector<int> leaves1;
        vector<int> leaves2;
        dfs(root1,leaves1);
        dfs(root2,leaves2);
        
        return leaves1==leaves2;
    }
};
