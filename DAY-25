Lowest Common Ancestor of a binary Tree
Minimum Absolute Difference in BST

 TreeNode *lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(root==NULL)return NULL;
        if(root->val==p->val || root->val==q->val)
        {
            return root;
        }
        TreeNode *lca1 = lowestCommonAncestor(root->left,p,q);
        TreeNode *lca2 = lowestCommonAncestor(root->right,p,q);
        if(lca1!=NULL && lca2!=NULL)
        {
            return root;
        }
        if(lca1!=NULL)
        {
            return lca1;
        }
        else
        {
            return lca2;
        }
    }
};
.............................................
class Solution {
public:
    int diff=INT_MAX;
    TreeNode *prev=NULL;
    
    void dfs(TreeNode *root)
    {
        if(root->left!=NULL)
        {
            dfs(root->left);
        }
        if(prev!=NULL)
        {
            diff=min(diff,abs(prev->val - root->val));
        }
        prev=root;
        if(root->right!=NULL)
        {
            dfs(root->right);
        }
    }
    int getMinimumDifference(TreeNode* root)
    {
        dfs(root);
        return diff;
    }
};
